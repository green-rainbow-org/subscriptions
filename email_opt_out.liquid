{% include "breadcrumbs" %}

{% if page.headline.size > 0 %}
<h2 class="headline">{{ page.headline }}</h2>
{% endif %}

<div id="content">

  <div id="intro" class="intro">
    <div class="text-content">
      {{ page.basic.content }}
      <div id="grp-opt-out-interactive"></div>
    </div>
  </div>

  {% if page.is_homepage? == true and site.page_tags contains "homepage" %}
    {% tag "homepage" with "homepage_widget" %}
  {% endif %}
  
  <script type="importmap">
  {
    "imports": {
      "arrow-tags": "https://cdn.jsdelivr.net/npm/arrow-tags@1.0.0-beta.7/dist/index.mjs",
      "@arrow-js/core": "https://cdn.jsdelivr.net/npm/@arrow-js/core@1.0.0-alpha.9/dist/index.mjs"
    },
    "scopes": {
      "https://cdn.jsdelivr.net/": {}
    }
  }
  </script>
  <!-- ES Module Shims: Import maps polyfill for modules browsers without import maps support (Safari 16.3) -->
  <script async src="https://ga.jspm.io/npm:es-module-shims@1.5.1/dist/es-module-shims.js" crossorigin="anonymous"></script>
  <script type="module">
import { reactive, html } from '@arrow-js/core'
import ArrowTags from 'arrow-tags';

const toDefault = () => {
  return {};
}

const toItem = (v, key) => {
  const { Li } = ArrowTags;
  const style = `
    display: grid;
    align-content: center;
    justify-content: center;
    white-space: nowrap;
    text-align: center;
  `;
  const props = { html, style, key };
  return Li`${() => v}`(props);
}

const List = (fn, opts) => {
  const style = opts?.style || '';
  const props = {
    style: `
      ${style}
      margin: 0;
      padding: 0;
      list-style-type: none;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
			grid-auto-rows: 100px;
      display: grid;
    `
  };
  const { Ul } = ArrowTags;
  return Ul`${fn}`(props);
}

const Form = (actions) => {
  const table = List(d => {
    return actions.map(toItem);
  });
  return table;
}

const Root = (actions) => {
  const props = {
    style: `
      display: grid;
      align-content: center;
      justify-content: center;
      grid-template-columns: 1fr;
      grid-template-rows: 1fr auto 1fr;
    `
  };
  const { Div } = ArrowTags;
  const pad = Div`${' '}`;
  const form = Form(actions);
  return Div`${pad}${form}${pad}`(props);
}

const modify = () => {
  const grid = document.getElementsByClassName('text-content')[0].getElementsByClassName('intro-content')[0];
  grid.style.gap = '0.25rem';
  grid.style.display = 'grid';
  grid.style.paddingTop = '1rem';
  grid.style.gridTemplateRows = 'repeat(3, auto)';
  grid.style.gridTemplateColumns = '100px 1fr 100px';
  [...grid.getElementsByTagName('p')].forEach((item, idx) => {
    item.style.margin = '0px';
    if (idx === 0) item.style.gridColumn = '1 / span 2';
    else if (idx === 1) {
      item.style.gridColumn = '1 / span 3';
      item.style.paddingBottom = '0.5rem';
      item.style.paddingTop = '0.5rem';
    }
    else item.style.gridColumn = '2 / span 2';
  })
  const list = grid.getElementsByTagName('ul')[0];
  const actions = [...list.getElementsByTagName('li')].map((el) => {
    return el.innerText;
  });
  list.remove();
  return actions;
}

const main = (actions) => {
  const { render } = ArrowTags;
  const data = reactive(toDefault());
  const id = 'grp-opt-out-interactive';
  const root = Root(actions);
  render(id, html, data, root);
}
const actions = modify();
main(actions);
  </script>
</div>
